<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta http-equiv="Content-Language" content="en" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Script-Type" content="text/javascript" />
<title>Very Large Memory and HugePages</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 020" />
<meta name="Date" content="2011-03-24T3:32:28Z" />
<meta name="robots" content="all" scheme="http://www.robotstxt.org/" />
<meta name="doctitle" content="Oracle&reg; Database Administrator's Reference 11g Release 2 (11.2) for Linux and UNIX-Based Operating Systems" />
<meta name="partno" content="E10839-14" />
<meta name="docid" content="UNXAR" />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />
<link rel="Stylesheet" href="../../dcommon/css/blafdoc.css" title="Default" type="text/css" />
<script type="text/javascript" src="../../dcommon/js/doccd.js">
</script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="appg_db_lmts.htm" title="Previous" type="text/html" />
<link rel="Next" href="index.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10839.pdf" title="PDF version" type="application/pdf" />
</head>
<body>
<div class="header">
<div class="zz-skip-header"><a name="top" id="top" href="#BEGIN">Skip Headers</a></div>
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100%">
<tr>
<td align="left" valign="top"><b>Oracle&reg; Database Administrator's Reference<br />
11<i>g</i> Release 2 (11.2) for Linux and UNIX-Based Operating Systems</b><br />
Part Number E10839-14</td>
<td valign="bottom" align="right">
<table class="icons oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="245">
<tr>
<td align="center" valign="top"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td align="center" valign="top"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td align="center" valign="top"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td align="center" valign="top"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td align="center" valign="top"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
<hr />
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100%">
<tr>
<td align="left" valign="top">
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="98">
<tr>
<td align="center" valign="top"><a href="appg_db_lmts.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td align="center" valign="top"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td align="right" valign="top" style="font-size: 90%"><a href="../e10839.pdf">View PDF</a></td>
</tr>
</table>
<a name="BEGIN" id="BEGIN"></a></div>
<div class="IND"><!-- End Header --><a id="CACGAEDJ" name="CACGAEDJ"></a><a id="UNXAR385" name="UNXAR385"></a>
<h1 class="appendix"><span class="secnum">G</span> Very Large Memory and HugePages</h1>
<p>This chapter guides Linux system administrators to configure Very Large Memory configurations and HugePages on Red Hat Enterprise Linux/ Oracle Linux.</p>
<p>This chapter contains the following sections:</p>
<ul>
<li>
<p><a href="#CACEGHIB">Very Large Memory on Linux x86</a></p>
</li>
<li>
<p><a href="#CACDCGAH">Overview of HugePages</a></p>
</li>
</ul>
<a id="CACEGHIB" name="CACEGHIB"></a><a id="UNXAR386" name="UNXAR386"></a>
<div class="sect1">
<h2 class="sect1"><span class="secnum">G.1</span> Very Large Memory on Linux x86</h2>
<p>Very Large Memory (VLM) configurations allow a 32-bit Oracle Database to access more than 4GB RAM that is traditionally available to Linux applications. The Oracle VLM option for 32-bit creates a large database buffer cache using an in-memory file system (<code>/dev/shm</code>). Other parts of the SGA are allocated from regular memory. VLM configurations improve database performance by caching more database buffers in memory, which significantly reduces the disk I/O compared to configurations without VLM. This chapter shows how to increase the SGA memory using VLM on a 32-bit computer.</p>
<div class="infoboxnote">
<p class="notep1">Note:</p>
The contents documented in this section apply only to 32-bit Linux operating system. With a 64-bit architecture, VLM support is available natively. All 64-bit Linux operating systems use the physical memory directly, as the maximum available virtual address space is 16 EB (exabyte = 2^60 bytes.)</div>
<p>This section includes the following topics:</p>
<ul>
<li>
<p><a href="#CACEFHBC">Implementing VLM on 32-bit Linux</a></p>
</li>
<li>
<p><a href="#CACJCJDH">Prerequisites for Implementing VLM</a></p>
</li>
<li>
<p><a href="#CACGFHJE">Methods To Increase SGA Limits</a></p>
</li>
<li>
<p><a href="#CACCIGFE">Configuring Very Large Memory for Oracle Database</a></p>
</li>
<li>
<p><a href="#CACGHJHI">Restrictions Involved in Implementing Very Large Memory</a></p>
</li>
</ul>
<a id="CACEFHBC" name="CACEFHBC"></a><a id="UNXAR387" name="UNXAR387"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">G.1.1</span> Implementing VLM on 32-bit Linux</h3>
<p>With 32-bit architectures, VLM is accessed through a VLM window of a specific size. The VLM window is a data structure in the process address space that provides access to the whole virtual address space from a window of a specific size. On 32-bit Linux, you must set the parameter <code>USE_INDIRECT_DATA_BUFFERS=TRUE</code>, and mount a <code>shmfs</code> or <code>tmpfs</code> or <code>ramfs</code> type of in-memory filesystem over <code>/dev/shm</code> to increase the usable address space.</p>
</div>
<!-- class="sect2" -->
<a id="CACJCJDH" name="CACJCJDH"></a><a id="UNXAR388" name="UNXAR388"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">G.1.2</span> Prerequisites for Implementing VLM</h3>
<p>The following are some of the prerequisites for implementing VLM on a 32-bit operating system:</p>
<ul>
<li>
<p>The computer on which Oracle Database is installed must have more than 4GB of memory.</p>
</li>
<li>
<p>The computer must be configured to use a kernel with PAE support upon startup.</p>
</li>
<li>
<p>The <code>USE_INDIRECT_DATA_BUFFERS=TRUE</code> must be present in the initialization parameter file for the database instance that uses VLM support.</p>
</li>
<li>
<p>Initialization parameters <code>DB_BLOCK_BUFFERS</code> and <code>DB_BLOCK_SIZE</code> must be set to values you have chosen for the Oracle Database.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CACGFHJE" name="CACGFHJE"></a><a id="UNXAR389" name="UNXAR389"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">G.1.3</span> Methods To Increase SGA Limits</h3>
<p>In a typical 32-bit Linux kernel, one can create an SGA of up to 1.7GB size. Using a Linux Hugemem kernel enables the creation of an SGA of upto 3.6GB size. To go beyond 3.6GB on a 32-bit kernel, you must use the VLM feature.</p>
<p>The following are the methods to increase SGA limits on a 32-bit computer:</p>
<ul>
<li>
<p><a href="#CACFBJGF">Hugemem Kernel</a></p>
</li>
<li>
<p><a href="#CACFFFHF">Hugemem Kernel with Very Large Memory</a></p>
</li>
</ul>
<a id="CACFBJGF" name="CACFBJGF"></a><a id="UNXAR390" name="UNXAR390"></a>
<div class="sect3">
<h4 class="sect3"><span class="secnum">G.1.3.1</span> Hugemem Kernel</h4>
<p>Red Hat Enterprise Linux 4 and Oracle Linux 4 include a new kernel known as the Hugemem kernel. The Hugemem kernel feature is also called a 4GB-4GB Split Kernel as it supports a 4GB per process user space (versus 3GB for the other kernels), and a 4GB direct kernel space. Using this kernel enables RHEL 4/Oracle Linux 4 to run on systems with up to 64GB of main memory. The Hugemem kernel is required to use all the memory in system configurations containing more than 16GB of memory. The Hugemem kernel can run configurations with less memory.</p>
<p>A classic 32-bit 4GB virtual address space is split 3GB for user processes and 1GB for the kernel. The new scheme (4GB/4GB) permits 4GB of virtual address space for the kernel and almost 4GB for each user process. Due to this scheme with hugemem kernel, 3.6GB of SGA can be created without using the indirect data buffer method.</p>
<div class="infoboxnote">
<p class="notep1">Note:</p>
Red Hat Enterprise Linux 5/ Oracle Linux 5 on 32-bit does not have the hugemem kernel. It supports only the 3GB user process/ 1GB kernel split. It has a PAE kernel that supports systems with more than 4GB of RAM and reliably upto 16GB. Since this has a 3GB/1GB kernel split, the system may run out of lowmem if the system's load consumes lots of lowmem. There is no equivalent kernel for hugemem in Enterprise Linux 5 and one is recommended to either use Enterprise Linux 4 with hugemem or go for 64-bit.</div>
<p>The Hugemem kernel on large computers ensures better stability as compared to the performance overhead of address space switching.</p>
<p>Run the following command to determine if you are using the <code>Hugemem</code> kernel:</p>
<pre xml:space="preserve" class="oac_no_warn">$ uname -r
2.6.9-5.0.3.ELhugemem
</pre></div>
<!-- class="sect3" -->
<a id="CACFFFHF" name="CACFFFHF"></a><a id="UNXAR391" name="UNXAR391"></a>
<div class="sect3">
<h4 class="sect3"><span class="secnum">G.1.3.2</span> Hugemem Kernel with Very Large Memory</h4>
<p>If you use only Hugemem kernels on 32-bit systems, then the SGA size can be increased but not significantly. Refer to section <a href="#CACFBJGF">"Hugemem Kernel"</a>, for more information.</p>
<div class="infoboxnote">
<p class="notep1">Note:</p>
Red Hat Enterprise Linux 5/ Oracle Linux 5 does not support the hugemem kernel. It supports a PAE kernel that can be used to implement Very Large Memory (VLM) as long as the physical memory does not exceed 16GB.</div>
<p>This section shows how the SGA can be significantly increased by using Hugemem kernel with VLM on 32-bit systems.</p>
<p>The SGA can be increased to about 62GB (depending on block size) on a 32-bit system with 64GB RAM. A processor feature called Page Address Extension (PAE) permits you to physically address 64GB of RAM. Since PAE does not enable a process or program to either address more than 4GB directly, or have a virtual address space larger than 4GB, a process cannot attach to shared memory directly. To address this issue, a shared memory filesystem (memory-based filesystem) must be created which can be as large as the maximum allowable virtual memory supported by the kernel. With a shared memory filesystem processes can dynamically attach to regions of the filesystem allowing applications like Oracle to have virtually a much larger shared memory on 32-bit operating systems. This is not an issue on 64-bit operating systems.</p>
<p>VLM moves the database buffer cache part of the SGA from the System V shared memory to the shared memory filesystem. It is still considered one large SGA but it consists now of two different operating system shared memory entities. VLM uses 512MB of the non-buffer cache SGA to manage VLM. This memory area is needed for mapping the indirect data buffers (shared memory filesystem buffers) into the process address space since a process cannot attach to more than 4GB directly on a 32-bit system.</p>
<div class="infoboxnote">
<p class="notep1">Note:</p>
<code>USE_INDIRECT_DATA_BUFFERS</code>=<code>TRUE</code> must be present in the initialization parameter file for the database instance that use Very Large Memory support. If this parameter is not set, then Oracle Database 11<span class="italic">g</span> Release 2 (11.2) or later behaves in the same way as previous releases.
<p>You must also manually set the initialization parameters <code>DB_BLOCK_BUFFERS</code> and <code>SHARED_POOL_SIZE</code> to values you have chosen for an Oracle Database. Automatic Memory Management (AMM) cannot be used. The initialization parameter <code>DB_BLOCK_SIZE</code> sets the block size and in combination with <code>DB_BLOCK_BUFFERS</code> determines the buffer cache size for an instance</p>
</div>
<p>For example, if the non-buffer cache SGA is 2.5GB, then you will only have 2GB of non-buffer cache SGA for shared pool, large pool, and redo log buffer since 512MB is used for managing VLM. It is not recommended to use VLM if buffer cache size is less than 512MB.</p>
<p>In RHEL 4/ Oracle Linux 4 there are two different memory file systems that can be used for VLM:</p>
<ul>
<li>
<p><code>tmpfs or shmfs</code>: mount a <code>shmfs</code> with a certain size to <code>/dev/shm</code>, and set the correct permissions. For <code>tmpfs</code> you do not need to specify a size. <code>Tmpfs or</code> <code>shmfs</code> allocated memory is pageable.</p>
<p>For example:</p>
<pre xml:space="preserve" class="oac_no_warn">Example Mount shmfs:
# mount -t shm shmfs -o size=20g /dev/shm

Edit /etc/fstab:
shmfs /dev/shm shm size=20g 0 0

OR

Example Mount tmpfs:
# mount &#x2013;t tmpfs tmpfs /dev/shm

Edit /etc/fstab:
none /dev/shm tmpfs defaults 0 0
</pre></li>
<li>
<p><code>ramfs</code>: <code>ramfs</code> is similar to <code>shmfs</code>, except that pages are not pageable or swappable. This approach provides the commonly desired effect. <code>ramfs</code> is created by:</p>
<pre xml:space="preserve" class="oac_no_warn">umount /dev/shm
mount -t ramfs ramfs /dev/shm
</pre></li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CACCIGFE" name="CACCIGFE"></a><a id="UNXAR392" name="UNXAR392"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">G.1.4</span> Configuring Very Large Memory for Oracle Database</h3>
<p>Complete the following procedure to configure Very Large Memory on Red Hat Enterprise Linux 4/ Oracle Linux 4 using <code>ramfs</code>:</p>
<ol>
<li>
<p>Log in as a <code>root</code> user:</p>
<pre xml:space="preserve" class="oac_no_warn">sudo -sh
Password:
</pre></li>
<li>
<p>Edit the <code>/etc/rc.local</code> file and add the following entries to it to configure the computer to mount <code>ramfs</code> over the <code>/dev/shm</code> directory, whenever you start the computer:</p>
<pre xml:space="preserve" class="oac_no_warn">umount /dev/shm
mount -t ramfs ramfs /dev/shm
chown oracle:oinstall /dev/shm
</pre>
<p>In the preceding commands, <code>oracle</code> is the owner of Oracle software files and <code>oinstall</code> is the group for Oracle owner account. If the new configuration disables <code>/etc/rc.local</code> file or you start an instance of Oracle database using a Linux service script present under the <code>/etc/init.d</code> file, then you can add those entries in the service script too.</p>
<p>Note, this configuration will make <code>ramfs</code> ready even before your system autostarts crucial Oracle Database instances. The commands can also be included in your startup scripts. It is important that you test the commands extensively by repeated reboot action, after you complete configuring the computer using the following steps:</p>
</li>
<li>
<p>Restart the server.</p>
</li>
<li>
<p>Log in as a <code>root</code> user.</p>
</li>
<li>
<p>Run the following command to check if the <code>/dev/shm</code> directory is mounted with the ramfs type:</p>
<pre xml:space="preserve" class="oac_no_warn">/dev/shm directory is mounted with the ramfs type:

# mount | grep shm
ramfs on /dev/shm type ramfs (rw)
</pre></li>
<li>
<p>Run the following command to check the permissions on the <code>/dev/shm</code> directory:</p>
<pre xml:space="preserve" class="oac_no_warn"># ls -ld /dev/shm
drwxr-xr-x  3 oracle oinstall 0 Jan 13 12:12 /dev/shm
</pre></li>
<li>
<p>Edit the <code>/etc/security/limits.conf</code> file and add the following entries to it to increase the max locked memory limit:</p>
<pre xml:space="preserve" class="oac_no_warn">soft    memlock        3145728
hard    memlock        3145728
</pre></li>
<li>
<p>Switch to the <code>oracle</code> user:</p>
<pre xml:space="preserve" class="oac_no_warn"># sudo - oracle
Password:
</pre></li>
<li>
<p>Run the following command to check the max locked memory limit:</p>
<pre xml:space="preserve" class="oac_no_warn">$ ulimit -l
3145728
</pre></li>
<li>
<p>Complete the following procedure to configure instance parameters for Very Large Memory:</p>
<ol>
<li>
<p>Replace the <code>DB_CACHE_SIZE</code>, <code>DB_xK_CACHE_SIZE</code>, <code>sga_target</code>, and <code>memory_target</code> parameters with <code>DB_BLOCK_BUFFERS</code> parameter.</p>
</li>
<li>
<p>Add the <code>USE_INDIRECT_DATA_BUFFERS=TRUE</code> parameter.</p>
</li>
<li>
<p>Configure SGA size according to the SGA requirements.</p>
</li>
<li>
<p>Remove <code>SGA_TARGET</code>, <code>MEMORY_TARGET</code>, or <code>MEMORY_MAX_TARGET</code> parameters, if set.</p>
</li>
</ol>
</li>
<li>
<p>Start the database instance.</p>
</li>
<li>
<p>Run the following commands to check the memory allocation:</p>
<pre xml:space="preserve" class="oac_no_warn">$ ls -l /dev/shm
$ ipcs -m
</pre></li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CACFIHHA">"Configuring HugePages on RHEL/ Oracle Linux"</a> section for more information about HugePages.</div>
</div>
<!-- class="sect2" -->
<a id="CACGHJHI" name="CACGHJHI"></a><a id="UNXAR393" name="UNXAR393"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">G.1.5</span> Restrictions Involved in Implementing Very Large Memory</h3>
<p>Following are the limitations of running a computer in the Very Large Memory mode:</p>
<ul>
<li>
<p>You cannot use Automatic Memory Management (AMM) while implementing VLM using <code>ramfs</code>, because AMM works on dynamic SGA tuning. With AMM swapping is possible. For example, you can unmap the unused SGA space and map it to PGA. Dynamic SGA and multiple block size are not supported with Very Large Memory because <code>ramfs</code> is not swappable. To enable Very Large Memory, you must ensure that you set the value of <code>MEMORY_TARGET</code> to zero.</p>
</li>
<li>
<p>VLM can be implemented only if Database Buffer Cache size is greater than 512MB.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CACDCGAH" name="CACDCGAH"></a><a id="UNXAR394" name="UNXAR394"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">G.2</span> Overview of HugePages</h2>
<p>HugePages is a feature integrated into the Linux kernel 2.6. It is a method to have larger page size that is useful for working with very large memory. HugePages is useful for both 32-bit and 64-bit configurations. HugePage sizes vary from 2MB to 256MB, depending on the kernel version and the hardware architecture. For Oracle Databases, using HugePages reduces the operating system maintenance of page states, and increases Translation Lookaside Buffer (TLB) hit ratio.</p>
<p>This section includes the following topics:</p>
<ul>
<li>
<p><a href="#CACIBJBB">Tuning SGA With HugePages</a></p>
</li>
<li>
<p><a href="#CACFIHHA">Configuring HugePages on RHEL/ Oracle Linux</a></p>
</li>
<li>
<p><a href="#CACDBJGC">Restrictions for HugePages Configurations</a></p>
</li>
</ul>
<a id="CACIBJBB" name="CACIBJBB"></a><a id="UNXAR395" name="UNXAR395"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">G.2.1</span> Tuning SGA With HugePages</h3>
<p>Without HugePages, the operating system keeps each 4KB of memory as a page, and when it is allocated to the SGA, then the lifecycle of that page (dirty, free, mapped to a process, and so on) is kept up to date by the operating system kernel.</p>
<p>With HugePages, the operating system page table (virtual memory to physical memory mapping) is smaller, since each page table entry is pointing to pages from 2MB to 256MB. Also, the kernel has fewer pages whose lifecyle must be monitored.</p>
<div class="infoboxnote">
<p class="notep1">Note:</p>
2MB size of HugePages is available with Linux x86-64, Linux x86, and IBM: Linux on System z.</div>
<p>The following are the advantages of using HugePages:</p>
<ul>
<li>
<p>Increased performance through increased TLB hits.</p>
</li>
<li>
<p>Pages are locked in memory and are never swapped out which guarantees that shared memory like SGA remains in RAM.</p>
</li>
<li>
<p>Contiguous pages are preallocated and cannot be used for anything else but for System V shared memory (e.g. SGA)</p>
</li>
<li>
<p>Less bookkeeping work for the kernel for that part of virtual memory due to larger page sizes</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CACFIHHA" name="CACFIHHA"></a><a id="UNXAR396" name="UNXAR396"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">G.2.2</span> Configuring HugePages on RHEL/ Oracle Linux</h3>
<p>Complete the following steps to configure HugePages on the computer:</p>
<ol>
<li>
<p>Run the following command to display the value of <code>Hugepagesize</code> variable:</p>
<pre xml:space="preserve" class="oac_no_warn">$ grep Hugepagesize /proc/meminfo
</pre></li>
<li>
<p>Complete the following procedure to create a script that computes recommended values for <code>hugepages</code> configuration for the current shared memory segments:</p>
<div class="infoboxnote">
<p class="notep1">Note:</p>
Following is an example that may require modifications.</div>
<ol>
<li>
<p>Create a text file named <code>hugepages_settings.sh</code>.</p>
</li>
<li>
<p>Add the following content in the file:</p>
<pre xml:space="preserve" class="oac_no_warn">#!/bin/bash
#
# hugepages_settings.sh
#
# Linux bash script to compute values for the
# recommended HugePages/HugeTLB configuration
#
# Note: This script does calculation for all shared memory
# segments available when the script is run, no matter it
# is an Oracle RDBMS shared memory segment or not.
# Check for the kernel version
KERN=`uname -r | awk -F. '{ printf("%d.%d\n",$1,$2); }'`
# Find out the HugePage size
HPG_SZ=`grep Hugepagesize /proc/meminfo | awk {'print $2'}`
# Start from 1 pages to be on the safe side and guarantee 1 free HugePage
NUM_PG=1
# Cumulative number of pages required to handle the running shared memory segments
for SEG_BYTES in `ipcs -m | awk {'print $5'} | grep "[0-9][0-9]*"`
do
   MIN_PG=`echo "$SEG_BYTES/($HPG_SZ*1024)" | bc -q`
   if [ $MIN_PG -gt 0 ]; then
      NUM_PG=`echo "$NUM_PG+$MIN_PG+1" | bc -q`
   fi
done
# Finish with results
case $KERN in
   '2.4') HUGETLB_POOL=`echo "$NUM_PG*$HPG_SZ/1024" | bc -q`;
          echo "Recommended setting: vm.hugetlb_pool = $HUGETLB_POOL" ;;
   '2.6') echo "Recommended setting: vm.nr_hugepages = $NUM_PG" ;;
    *) echo "Unrecognized kernel version $KERN. Exiting." ;;
esac
# End
</pre></li>
<li>
<p>Run the following command to change the permission of the file:</p>
<pre xml:space="preserve" class="oac_no_warn">$ chmod +x hugepages_settings.sh
</pre></li>
</ol>
</li>
<li>
<p><a id="CACJDEDA" name="CACJDEDA"></a>Run the <code>hugepages_settings.sh</code> script to compute the values for <code>hugepages</code> configuration:</p>
<pre xml:space="preserve" class="oac_no_warn">$ ./hugepages_settings.sh
</pre>
<div class="infoboxnote">
<p class="notep1">Note:</p>
Before running this script, ensure that all the applications that use <code>hugepages</code> run.</div>
</li>
<li>
<p>Set the following kernel parameter:</p>
<pre xml:space="preserve" class="oac_no_warn"># sysctl -w vm.nr_hugepages=<span class="italic">value_displayed_in_step_<a href="#CACJDEDA">3</a></span>
</pre></li>
<li>
<p>To make the value of the parameter available for every time you restart the computer, edit the <code>/etc/sysctl.conf</code> file and add the following entry:</p>
<pre xml:space="preserve" class="oac_no_warn">vm.nr_hugepages=<span class="italic">value_displayed_in_step_<a href="#CACJDEDA">3</a></span>
</pre></li>
<li>
<p>Run the following command to check the available <code>hugepages</code>:</p>
<pre xml:space="preserve" class="oac_no_warn">$ grep Huge /proc/meminfo
</pre></li>
<li>
<p>Restart the instance.</p>
</li>
<li>
<p>Run the following command to check the available <code>hugepages</code> (1 or 2 pages free):</p>
<pre xml:space="preserve" class="oac_no_warn">$ grep Huge /proc/meminfo
</pre>
<div class="infoboxnote">
<p class="notep1">Note:</p>
If the setting of the <code>nr_hugepages</code> parameter is not effective, you must restart the server.</div>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CACDBJGC" name="CACDBJGC"></a><a id="UNXAR397" name="UNXAR397"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">G.2.3</span> Restrictions for HugePages Configurations</h3>
<p>Following are the limitations of using HugePages:</p>
<ul>
<li>
<p>The Automatic Memory Management (AMM) and HugePages are not compatible. With AMM the entire SGA memory is allocated by creating files under <code>/dev/shm</code>. When Oracle Database allocates SGA that way HugePages are not reserved. You must disable AMM on Oracle Database 11<span class="italic">g</span> to use HugePages.</p>
</li>
<li>
<p>If you are using VLM in a 32-bit environment, then you cannot use HugePages for the Database Buffer cache. HugePages can be used for other parts of SGA like <code>shared_pool</code>, <code>large_pool</code>, and so on. Memory allocation for VLM (buffer cache) is done using shared memory file systems (<code>ramfs/tmpfs/shmfs</code>). HugePages does not get reserved or used by the memory file systems.</p>
</li>
<li>
<p>HugePages are not subject to allocation or release after system startup, unless a system administrator changes the HugePages configuration by modifying the number of pages available, or the pool size. If the space required is not reserved in memory during system startup, then HugePages allocation fails.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<div class="footer">
<hr />
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100%">
<col width="33%" />
<col width="*" />
<col width="33%" />
<tr>
<td align="left">
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="98">
<tr>
<td align="center" valign="top"><a href="appg_db_lmts.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td align="center" valign="top"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td style="font-size: 90%" align="center" class="copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2006, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td align="right">
<table class="icons oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="245">
<tr>
<td align="center" valign="top"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td align="center" valign="top"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td align="center" valign="top"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td align="center" valign="top"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td align="center" valign="top"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
</div>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
